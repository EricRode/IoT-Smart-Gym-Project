[
    {
        "id": "08a91f436021d7da",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cde89b5394368dd8",
        "type": "mqtt-broker",
        "name": "host.docker.internal:1883",
        "broker": "host.docker.internal",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b9b436f9507c8b3f",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "de4cdb1d8fe2dfb9",
        "type": "telegram bot",
        "botname": "SmartGym_LAquila",
        "usernames": "",
        "chatids": "-4736416351",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "1",
        "type": "mqtt in",
        "z": "08a91f436021d7da",
        "name": "incoming mqtt messages",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cde89b5394368dd8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 280,
        "wires": [
            [
                "1855d66927b37893",
                "b64f7c4593908e99",
                "f63b7cfb623cb511"
            ]
        ]
    },
    {
        "id": "1855d66927b37893",
        "type": "function",
        "z": "08a91f436021d7da",
        "name": "Transform data for InfluxDB",
        "func": "// Access MQTT topic\nlet topic = msg.topic;\nconst data = msg.payload;\n\n// Ensure the topic is valid and in the expected format\nif (!topic || topic.split(\"/\").length < 4) {\n    node.error(\"Invalid topic format. Expected: /<prefix>/<gym>/<sensorType>\");\n    return null;\n}\n\n// Split topic into components\nlet topicParts = topic.split(\"/\");\nlet gymAbbreviation = topicParts[2];  // Gym abbreviation (e.g., \"MBS\")\nlet sensorType = topicParts[3];       // Sensor type (e.g., \"occupancy\")\n\n// Ensure payload contains necessary properties\nif (!msg.payload || typeof msg.payload.value === 'undefined' || !msg.payload.timestamp || !msg.payload.sensor_id) {\n    node.error(\"Payload missing required properties: value, timestamp, or sensor_id.\");\n    return null;\n}\n\nmsg.payload = [\n    {\n        measurement: gymAbbreviation,\n        tags: {\n            \"sensor_type\": sensorType,\n            \"sensor_id\": data.sensor_id,\n        },\n        fields: {\n            value: parseFloat(msg.payload.value),\n        },\n        timestamp: msg.payload.time || Date.now()\n    }\n]\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "a44186e405dae92c"
            ]
        ]
    },
    {
        "id": "2fcc96ab6e685399",
        "type": "function",
        "z": "08a91f436021d7da",
        "name": "set global thresholds",
        "func": "global.set(\"thresholds\", {\n   co2_level: parseInt(env.get(\"CO2_THRESHOLD\"), 10) || 1000,\n    no2_level: parseInt(env.get(\"NO2_THRESHOLD\"), 10) || 50,\n    noise_level: parseInt(env.get(\"NOISE_THRESHOLD\"), 10) || 80,\n});\n\nglobal.set(\"configs\", {\n    telegram_admin_group_chat_id: parseInt(env.get(\"TELEGRAM_ADMIN_GROUP_CHAT_ID\"), 10) || -4736416351,\n    telegram_user_group_chat_id: parseInt(env.get(\"TELEGRAM_USER_GROUP_CHAT_ID\"), 10) || -4781056736\n});\n\nmsg.payload = global.get(\"thresholds\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7d8d492ca7106f48",
        "type": "inject",
        "z": "08a91f436021d7da",
        "name": "Run on startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "Initial thresholds set",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "2fcc96ab6e685399"
            ]
        ]
    },
    {
        "id": "b64f7c4593908e99",
        "type": "function",
        "z": "08a91f436021d7da",
        "name": "Analyze data for thresholds",
        "func": "// Retrieve the thresholds from the global context\nconst thresholds = global.get(\"thresholds\") || {};\nconst configs = global.get(\"configs\") || {};\n\n// Access MQTT topic\nlet topic = msg.topic;\n\n// Ensure the topic is valid and in the expected format\nif (!topic || !topic.includes(\"/\")) {\n    node.error(\"Invalid topic format. Expected: /<gym>/<sensorType>\");\n    return null;\n}\n\n// Split topic into gym and sensor type\nlet topicParts = topic.split(\"/\");\nlet gymAbbreviation = topicParts[1];  // Gym abbreviation (e.g., \"MBS\")\nlet sensorType = topicParts[2];       // Sensor type (e.g., \"co2_level\", \"noise_level\")\n\n// Validate the sensor type and check if it's monitored\nif (!thresholds.hasOwnProperty(sensorType)) {\n    node.warn(`Sensor type \"${sensorType}\" is not monitored.`);\n    return null;\n}\n\n// Extract the sensor value\nlet sensorValue = parseFloat(msg.payload.value);\nif (isNaN(sensorValue)) {\n    node.error(\"Invalid sensor value. Expected a numeric value.\");\n    return null;\n}\n\n// Check if the sensor value exceeds the threshold\nlet threshold = thresholds[sensorType];\nif (sensorValue > threshold) {\n    \n    // Format the message to notify about the violation\n    let notificationMessage = msg.payload = `\nDomain: \"Smart Gym Monitoring.\"\nSensor: \"${sensorType} Sensor.\"\nLocation: \"Gym: ${gymAbbreviation}.\"\nCondition: \"Exceeds ${sensorType} threshold: ${sensorValue} (Threshold: ${threshold}).\"\n`;\n\n    // Send the message to the admin group chat\n    msg.payload = {\n        chatId: configs.telegram_user_group_chat_id,\n        type: \"message\",\n        content: notificationMessage\n    };\n\n    // Return the notification message\n    return msg;\n} else {\n    // No threshold violation; do nothing\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 340,
        "wires": [
            [
                "6412f99e6babfe83"
            ]
        ]
    },
    {
        "id": "adf59206d1e223d8",
        "type": "function",
        "z": "08a91f436021d7da",
        "name": "get or set thresholds",
        "func": "let resultMessage = \"\"; \nconst chatId = msg.payload.chatId;\n\ntry {\n    // Attempt to parse the payload\n    const parts = msg.payload.content.split(\" \");\n    const command = parts[0];\n\n    // Handle the /set_threshold command\n    if (command === \"/set_threshold\") {\n        const sensor = parts[1];\n        const newThreshold = parseInt(parts[2], 10);\n\n        if (sensor && !isNaN(newThreshold)) {\n            // Retrieve existing thresholds or initialize an empty object\n            let thresholds = global.get(\"thresholds\") || {};\n\n            // Update the threshold for the specified sensor\n            thresholds[sensor] = newThreshold;\n            global.set(\"thresholds\", thresholds);\n\n            // Create a success message\n            resultMessage = `Threshold for ${sensor} updated to ${newThreshold}`;\n        } else {\n            resultMessage = \"Invalid format for /set_threshold. Use: /set_threshold <sensor> <value>\";\n        }\n    }\n    // Handle the /get_thresholds command\n    else if (command === \"/get_thresholds\") {\n        const thresholds = global.get(\"thresholds\") || {};\n        if (Object.keys(thresholds).length > 0) {\n            resultMessage = `Current thresholds: ${JSON.stringify(thresholds, null, 2)}`;\n        } else {\n            resultMessage = \"No thresholds set yet.\";\n        }\n    }\n    // Handle invalid commands\n    else {\n        resultMessage = `Invalid command. Valid commands are:\n        - /set_threshold <sensor> <value>: Set a threshold for a sensor\n        - /get_thresholds: Get the list of current thresholds`;\n    }\n} catch (error) {\n    // Handle unexpected errors during parsing or processing\n    node.error(\"Error processing the command: \" + error.message);\n    resultMessage = \"An error occurred while processing the command. Please check your input.\";\n}\n\nmsg.payload = {};\n\nmsg.payload = {\n        chatId: chatId,\n        type: \"message\",\n        content: resultMessage\n    };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "6412f99e6babfe83"
            ]
        ]
    },
    {
        "id": "6412f99e6babfe83",
        "type": "telegram sender",
        "z": "08a91f436021d7da",
        "name": "Send to admin group",
        "bot": "de4cdb1d8fe2dfb9",
        "haserroroutput": false,
        "outputs": 1,
        "x": 820,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b4f1c6b80e09274e",
        "type": "telegram receiver",
        "z": "08a91f436021d7da",
        "name": "",
        "bot": "de4cdb1d8fe2dfb9",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 120,
        "y": 160,
        "wires": [
            [
                "adf59206d1e223d8"
            ],
            []
        ]
    },
    {
        "id": "a44186e405dae92c",
        "type": "influxdb batch",
        "z": "08a91f436021d7da",
        "influxdb": "b9b436f9507c8b3f",
        "precision": "",
        "retentionPolicy": "",
        "name": "Save data to influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "se4iot",
        "bucket": "smartgym",
        "x": 1070,
        "y": 280,
        "wires": []
    },
    {
        "id": "e913e69f04b21679",
        "type": "influxdb in",
        "z": "08a91f436021d7da",
        "influxdb": "b9b436f9507c8b3f",
        "name": "Query latest sensor data",
        "query": "from(bucket: \"smartgym\")\n  |> range(start: -1m) // Last 1 minute\n  |> filter(fn: (r) => r.sensor_type == \"no2_level\" or r.sensor_type == \"co_level\" or r.sensor_type == \"humidity\" or r.sensor_type == \"pm2.5\" or r.sensor_type == \"pm10\")\n  |> group(columns: [\"_measurement\", \"sensor_id\", \"sensor_type\"]) // Group by sensor ID and type\n  |> last()",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "se4iot",
        "x": 470,
        "y": 460,
        "wires": [
            [
                "0daa7626a1e2d4f2"
            ]
        ]
    },
    {
        "id": "15346ae780fb9b73",
        "type": "inject",
        "z": "08a91f436021d7da",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "e913e69f04b21679",
                "8e55fc358fa9b684"
            ]
        ]
    },
    {
        "id": "0daa7626a1e2d4f2",
        "type": "function",
        "z": "08a91f436021d7da",
        "name": "Calculate AQI",
        "func": "/*// AQI Calculation Helper Function\nfunction calculateAQI(C, breakpoints) {\n    for (let i = 0; i < breakpoints.length; i++) {\n        let bp = breakpoints[i];\n        if (C >= bp.C_Lo && C <= bp.C_Hi) {\n            return ((bp.I_Hi - bp.I_Lo) / (bp.C_Hi - bp.C_Lo)) * (C - bp.C_Lo) + bp.I_Lo;\n        }\n    }\n    return null; // Return null if C is out of range\n}\n\n// Breakpoints for AQI Calculation\nconst co2Breakpoints = [\n    { C_Lo: 0, C_Hi: 400, I_Lo: 0, I_Hi: 50 },\n    { C_Lo: 401, C_Hi: 1000, I_Lo: 51, I_Hi: 100 },\n    { C_Lo: 1001, C_Hi: 1500, I_Lo: 101, I_Hi: 150 },\n    { C_Lo: 1501, C_Hi: 2000, I_Lo: 151, I_Hi: 200 }\n];\nconst no2Breakpoints = [\n    { C_Lo: 0, C_Hi: 53, I_Lo: 0, I_Hi: 50 },\n    { C_Lo: 54, C_Hi: 100, I_Lo: 51, I_Hi: 100 },\n    { C_Lo: 101, C_Hi: 360, I_Lo: 101, I_Hi: 150 },\n    { C_Lo: 361, C_Hi: 650, I_Lo: 151, I_Hi: 200 }\n];\nconst pm25Breakpoints = [\n    { C_Lo: 0, C_Hi: 12.0, I_Lo: 0, I_Hi: 50 },\n    { C_Lo: 12.1, C_Hi: 35.4, I_Lo: 51, I_Hi: 100 },\n    { C_Lo: 35.5, C_Hi: 55.4, I_Lo: 101, I_Hi: 150 },\n    { C_Lo: 55.5, C_Hi: 150.4, I_Lo: 151, I_Hi: 200 },\n    { C_Lo: 150.5, C_Hi: 250.4, I_Lo: 201, I_Hi: 300 }\n];\nconst pm10Breakpoints = [\n    { C_Lo: 0, C_Hi: 54, I_Lo: 0, I_Hi: 50 },\n    { C_Lo: 55, C_Hi: 154, I_Lo: 51, I_Hi: 100 },\n    { C_Lo: 155, C_Hi: 254, I_Lo: 101, I_Hi: 150 },\n    { C_Lo: 255, C_Hi: 354, I_Lo: 151, I_Hi: 200 },\n    { C_Lo: 355, C_Hi: 424, I_Lo: 201, I_Hi: 300 }\n];\nconst humidityBreakpoints = [\n    { C_Lo: 30, C_Hi: 50, I_Lo: 0, I_Hi: 50 },\n    { C_Lo: 51, C_Hi: 70, I_Lo: 51, I_Hi: 100 },\n    { C_Lo: 71, C_Hi: 80, I_Lo: 101, I_Hi: 150 },\n    { C_Lo: 81, C_Hi: 100, I_Lo: 151, I_Hi: 200 }\n];\n\n// Parse InfluxDB Data\nlet influxData = msg.payload;\nlet gyms = {};\n\n// Group data by gym location\ninfluxData.forEach(entry => {\n    let gym = entry._measurement;\n    let sensorType = entry.sensor_type;\n    let value = entry._value;\n\n    if (!gyms[gym]) {\n        gyms[gym] = { co2: [], no2: [], pm25: [], pm10: [], humidity: [] };\n    }\n\n    gyms[gym][sensorType]?.push(value);\n});\n\n// Prepare AQI Calculations\nlet payload = [];\nfor (let gym in gyms) {\n    let co2Avg = gyms[gym].co2.reduce((a, b) => a + b, 0) / (gyms[gym].co2.length || 1);\n    let no2Avg = gyms[gym].no2.reduce((a, b) => a + b, 0) / (gyms[gym].no2.length || 1);\n    let pm25Avg = gyms[gym].pm25.reduce((a, b) => a + b, 0) / (gyms[gym].pm25.length || 1);\n    let pm10Avg = gyms[gym].pm10.reduce((a, b) => a + b, 0) / (gyms[gym].pm10.length || 1);\n    let humidityAvg = gyms[gym].humidity.reduce((a, b) => a + b, 0) / (gyms[gym].humidity.length || 1);\n\n    let co2AQI = calculateAQI(co2Avg, co2Breakpoints) || 0;\n    let no2AQI = calculateAQI(no2Avg, no2Breakpoints) || 0;\n    let pm25AQI = calculateAQI(pm25Avg, pm25Breakpoints) || 0;\n    let pm10AQI = calculateAQI(pm10Avg, pm10Breakpoints) || 0;\n    let humidityAQI = (calculateAQI(humidityAvg, humidityBreakpoints) || 0) * 0.2;\n\n    let overallAQI = Math.max(co2AQI, no2AQI, pm25AQI, pm10AQI, humidityAQI);\n\n    // Format data for InfluxDB\n    payload.push({\n        measurement: gym,\n        tags: {\n            \"sensor_type\": \"AQI\",\n            \"sensor_id\": \"AQI_\" + gym\n        },\n        fields: {\n            value: Math.round(overallAQI),\n        },\n        timestamp: Date.now()\n    });\n}\n\n// Output the formatted payload\nmsg.payload = payload;\nreturn msg;*/\n\n\n// AQI Breakpoints as per U.S. EPA standards\nconst breakpoints = {\n    PM10: [\n        { concentration: [0, 54], aqi: [0, 50] },\n        { concentration: [55, 154], aqi: [51, 100] },\n        { concentration: [155, 254], aqi: [101, 150] },\n        { concentration: [255, 354], aqi: [151, 200] },\n        { concentration: [355, 424], aqi: [201, 300] },\n        { concentration: [425, 504], aqi: [301, 400] },\n        { concentration: [505, 604], aqi: [401, 500] }\n    ],\n    PM2_5: [\n        { concentration: [0.0, 12.0], aqi: [0, 50] },\n        { concentration: [12.1, 35.4], aqi: [51, 100] },\n        { concentration: [35.5, 55.4], aqi: [101, 150] },\n        { concentration: [55.5, 150.4], aqi: [151, 200] },\n        { concentration: [150.5, 250.4], aqi: [201, 300] },\n        { concentration: [250.5, 350.4], aqi: [301, 400] },\n        { concentration: [350.5, 500.4], aqi: [401, 500] }\n    ],\n    CO: [\n        { concentration: [0.0, 4.4], aqi: [0, 50] },\n        { concentration: [4.5, 9.4], aqi: [51, 100] },\n        { concentration: [9.5, 12.4], aqi: [101, 150] },\n        { concentration: [12.5, 15.4], aqi: [151, 200] },\n        { concentration: [15.5, 30.4], aqi: [201, 300] },\n        { concentration: [30.5, 40.4], aqi: [301, 400] },\n        { concentration: [40.5, 50.4], aqi: [401, 500] }\n    ],\n    NO2: [\n        { concentration: [0, 53], aqi: [0, 50] },\n        { concentration: [54, 100], aqi: [51, 100] },\n        { concentration: [101, 360], aqi: [101, 150] },\n        { concentration: [361, 649], aqi: [151, 200] },\n        { concentration: [650, 1249], aqi: [201, 300] },\n        { concentration: [1250, 1649], aqi: [301, 400] },\n        { concentration: [1650, 2049], aqi: [401, 500] }\n    ]\n};\n\n// Function to calculate AQI for a given pollutant and its concentration\nfunction calculateAQI(pollutant, concentration) {\n    const pollutantBreakpoints = breakpoints[pollutant];\n    for (let i = 0; i < pollutantBreakpoints.length; i++) {\n        const { concentration: [C_low, C_high], aqi: [I_low, I_high] } = pollutantBreakpoints[i];\n        if (concentration >= C_low && concentration <= C_high) {\n            // Linear interpolation formula\n            return Math.round(((I_high - I_low) / (C_high - C_low)) * (concentration - C_low) + I_low);\n        }\n    }\n    return null; // Return null if concentration is out of range\n}\n\n// Main function to calculate the overall AQI\nfunction getOverallAQI(pm10, pm2_5, co, no2) {\n    const aqiValues = [\n        calculateAQI('PM10', pm10),\n        calculateAQI('PM2_5', pm2_5),\n        calculateAQI('CO', co),\n        calculateAQI('NO2', no2)\n    ];\n    // Filter out null values and return the maximum AQI\n    return Math.max(...aqiValues.filter(aqi => aqi !== null));\n}\n\n// Parse InfluxDB Data\nlet influxData = msg.payload;\nlet gyms = {};\n\n// Group data by gym location\ninfluxData.forEach(entry => {\n    let gym = entry._measurement;\n    let sensorType = entry.sensor_type;\n    let value = entry._value;\n\n    if (!gyms[gym]) {\n        gyms[gym] = { co: [], no2: [], pm25: [], pm10: []};\n    }\n\n    gyms[gym][sensorType]?.push(value);\n});\n\n// Prepare AQI Calculations\nlet payload = [];\nfor (let gym in gyms) {\n    let coAvg = gyms[gym].co.reduce((a, b) => a + b, 0) / (gyms[gym].co.length || 1);\n    let no2Avg = gyms[gym].no2.reduce((a, b) => a + b, 0) / (gyms[gym].no2.length || 1);\n    let pm25Avg = gyms[gym].pm25.reduce((a, b) => a + b, 0) / (gyms[gym].pm25.length || 1);\n    let pm10Avg = gyms[gym].pm10.reduce((a, b) => a + b, 0) / (gyms[gym].pm10.length || 1);\n\n    const overallAQI = getOverallAQI(pm10Avg, pm25Avg, coAvg, no2Avg);\n    \n    // Format data for InfluxDB\n    payload.push({\n        measurement: gym,\n        tags: {\n            \"sensor_type\": \"AQI\",\n            \"sensor_id\": \"AQI_\" + gym\n        },\n        fields: {\n            value: Math.round(overallAQI),\n        },\n        timestamp: Date.now()\n    });\n}\n\n// Output the formatted payload\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 460,
        "wires": [
            [
                "a44186e405dae92c"
            ]
        ]
    },
    {
        "id": "8e55fc358fa9b684",
        "type": "influxdb in",
        "z": "08a91f436021d7da",
        "influxdb": "b9b436f9507c8b3f",
        "name": "Query area occupations",
        "query": "from(bucket: \"smartgym\")\n  |> range(start: -1m) // Last 1 minute\n  |> filter(fn: (r) => r.sensor_type == \"strength_training\" or r.sensor_type == \"aerobic\" or r.sensor_type == \"functional\" or r.sensor_type == \"no_equipment\")\n  |> group(columns: [\"_measurement\", \"sensor_id\", \"sensor_type\"]) // Group by sensor ID and type\n  |> last()",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "se4iot",
        "x": 470,
        "y": 520,
        "wires": [
            [
                "b634411ca83c385d"
            ]
        ]
    },
    {
        "id": "b634411ca83c385d",
        "type": "function",
        "z": "08a91f436021d7da",
        "name": "Calculate total amount of people ",
        "func": "// Input from the InfluxDB node\nlet influxData = msg.payload; // Assuming the query result is in msg.payload\nlet gyms = {};\n\n// Group data by gym location\ninfluxData.forEach(entry => {\n    let gym = entry._measurement; // Gym name or location from the measurement field\n    let value = entry._value; // Number of people from the _value field\n\n    if (!gyms[gym]) {\n        gyms[gym] = { totalPeople: 0 };\n    }\n\n    gyms[gym].totalPeople += value; // Sum up the _value for each gym\n});\n\n// Prepare the output payload\nlet payload = [];\nfor (let gym in gyms) {\n    payload.push({\n        measurement: gym,\n        tags: {\n            \"sensor_type\": \"total_people\",\n            \"sensor_id\": \"total_people_\" + gym\n        },        \n        fields: {\n            value: gyms[gym].totalPeople\n        },\n        timestamp: Date.now() // Optional: Add a timestamp if needed\n    });\n}\n\n// Output the formatted payload\nmsg.payload = payload;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 520,
        "wires": [
            [
                "a44186e405dae92c"
            ]
        ]
    },
    {
        "id": "f63b7cfb623cb511",
        "type": "debug",
        "z": "08a91f436021d7da",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 220,
        "wires": []
    }
]